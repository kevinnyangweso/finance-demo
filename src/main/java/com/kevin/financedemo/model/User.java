package com.kevin.financedemo.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.UUID;

@Entity
@Table(name = "users") //matches the DB table name

public class User {

    // Primary key (generated automatically)
    @Id
    @GeneratedValue //do not add strategy because value is gotten from DB (gen_random_uuid())
    @Column(name = "user_id", columnDefinition = "UUID DEFAULT gen_random_uuid()",
            updatable = false, nullable = false)
    private UUID userId;

    // Username
    @Column(name = "username", nullable = false, unique = true, length = 50)
    @NotBlank(message = "Username field is empty.")
    @Size(max = 50, min = 3, message = "Username should have between 3 and 100 characters.")
    private String username;

    // Email
    @Email(message = "Please provide a valid email address.")
    @NotBlank(message = "Email field is empty.")
    @Column (name = "email", nullable = false, unique = true, length = 100)
    private String email;

    // Password (hashed)
    @Column(name = "password_hash", nullable = false)
    @NotBlank(message = "Enter your password")
    private String passwordHash;

    // First name
    @Column(name = "first_name", length = 100)
    private String firstName;

    // Last name
    @Column(name = "last_name", length = 100)
    private String lastName;

    // Currency preference (e.g. USD, EUR, KES
    @Column(name = "currency_preference", length = 10)
    private String currencyPreference = "USD";

    // Created time
    @CreationTimestamp()
    @Column(name = "created_at", nullable = false, updatable = false)
    private OffsetDateTime createdAt = OffsetDateTime.now();

    @UpdateTimestamp
    @Column(name = "updated_at")
    private OffsetDateTime updatedAt = OffsetDateTime.now();

    // derived field (not stored in the DB)
    @Transient
    private String fullName;

    // constructors
    public User(){}

    // optional convenience constructor
    public User(String username, String email, String passwordHash){
        this.username = username;
        this.email = email;
        this.passwordHash = passwordHash;
    }

    //Getters and Setters

    //Getter method for the ID data object
    public UUID getUserId(){return this.userId;}
    //We DO NOT write a setter method for the ID data object because the
    //values in the ID field will be generated by the database.

    //N.B. Only write setter methods for fields that will be manually populated

    //Getter and Setter method for userName
    public String getUsername(){return this.username;}
    public void setUserName(String userName){this.username = userName;}

    //Getter and Setter method for password
    public String getPassword(){return this.passwordHash;}
    public void setPassword(String password){this.passwordHash = password;}

    //Getter and Setter method for email
    public String getEmail(){return this.email;}
    public void setEmail(String email){this.email = email;}

    //Getter and Setter method for firstName
    public String getFirstName(){return this.firstName;}
    public void setFirstName(String firstName){this.firstName = firstName;}

    //Getter and Setter method for lastName
    public String getLastName(){return this.lastName;}
    public void setLastName(String lastName){this.lastName = lastName;}

    //Getter and Setter method for currencyPreference
    public String getCurrencyPreference(){return this.currencyPreference;}
    public void setCurrencyPreference(){this.currencyPreference = currencyPreference;}

    //Getter for createdAt. No setter for createdAt because the value is database-generated
    public OffsetDateTime getCreatedAt(){return this.createdAt;}

    //Getter for updatedAt. No setter for updatedAt because the value is database-generated
    public OffsetDateTime getUpdatedAt(){return this.updatedAt;}

    // Getter method got fullName
    // This is a computed field. It is not stored in the DB
    public String getFullName(){
        if (firstName == null && lastName == null) return "";
        if (firstName == null) return lastName;
        if (lastName == null) return firstName;
        return firstName + " " + lastName;
    }

    // The preUpdate method updates the updatedAt automatically before saving a record.
    // The @PreUpdate and @PrePersist methods are not called manually by me.
    // They are called automatically by Hibernate when certain events happen in the entity's lifecycle.
    // For example if a user gets created in the userRepository the methods will be called.

    @PreUpdate
    public void preUpdate (){
        this.updatedAt = OffsetDateTime.now();
    }

    //the toString method is important for debugging
    @Override
    public String toString() {
        return "User{" +
                "id=" + userId +
                ", userName='" + username + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", email='" + email + '\'' +
                ", createdAt=" + createdAt +
                '}';
    }

}

